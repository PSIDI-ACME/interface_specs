openapi: 3.0.0
info:
  description: "Swagger proposed server for the Review Product infrastructure at ACME .Inc"
  version: "0.1"
  title: "ACME Reviews - PSIDI"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "11804281@isep.ipp.pt"
    
servers:
  - url: https://reviews-psidi.herokuapp.com/
    description: Evaluation server 
    
tags:
- name: "reviews"
  description: "Handles the Evaluation service requests"

paths:

   
####### Reviews ########

  /reviews/{reviewId}:
    patch:
      tags:
      - "reviews"  
      summary: "Update a Review Status"
      description: ""
      operationId: "updateReviewsStatus"
      requestBody:
        required: true
        description: "The data used to update a review (status)"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review-Status"
          application/xml:
            schema:
              $ref: "#/components/schemas/Review-Status"
      parameters:
        - in: "path"
          name: "reviewId"
          required: true  
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Review Updated"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  reviewId:
                    default: "https://reviews-psidi.herokuapp.com/reviews/:id"
            application/xml:
              schema:
                type: "object"
                xml: 
                  name: "review"
                properties:
                  reviewId:
                    type: "integer"
                    format: "int64"
                    description: "ID of the updated review"
          links:
            GetReviewById: 
              operationId: getReview
              parameters:
                customerId: '$response.body#/reviewId'
                required: true
                description: ""
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Request"      
        "503":
          description: "Service Unavailable"  
      security:
        - OAuth2: [moderator]
    get:
      tags:
      - "reviews"
      summary: "Get a Review By Id"
      description: ""
      operationId: "getReview"
      parameters:
        - in: "path"
          name: "reviewId"
          required: true  
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Review Obtained"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
            application/xml:
              schema:
                $ref: "#/components/schemas/Review"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Request"      
        "503":
          description: "Service Unavailable"  
      deprecated: false  
      
  /reviews:
    get:
      tags:
      - "reviews"  
      summary: "Get reviews by Status, Customer ID or Product"
      description: "If the user is anonymous, the productId is required. Otherwise, if a valid customer OAUTH authentication exists, then its reviews are listed"
      operationId: "getPendingReviews"
      parameters:
        - in: "query"
          name: "status"
          required: true  
          schema:
            type: string
            default: "pending"
        - in: "query"
          name: "product ID"
          required: false  
          schema:
            type: string
      responses:
        '200':
          description: "Reviews Fetched. If the OAUTH authorizes a customer, returns his or her own reviews with the given parameters. Otherwise, if the OAUTH authorizes a moderator, returns all reviews with the given parameters. "
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/Reviews"
            application/xml:
               schema:
                  $ref: "#/components/schemas/Reviews"
          links:
            GetReviewById: 
              operationId: getReview
              parameters:
                reviewId: '$response.body#/reviewId'
                required: true
                description: ""
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Request"      
        "503":
          description: "Service Unavailable"  
      security:
        - OAuth2: [customer_read, moderator]
        
    post:
      tags:
      - "reviews"  
      summary: "Post a new Review"
      description: ""
      operationId: "postReview"
      requestBody:
        required: true
        description: "Data required to post a review (score, reviewDescription)"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review-Create"
          application/xml:
            schema:
              $ref: "#/components/schemas/Review-Create"
      responses:
        '201':
          description: "Review sent for approval"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  reviewId:
                    type: "string"
                    default: "https://example.org/review/id"
                    description: "Review ID"
            application/xml:
              schema:
                type: "object"
                xml: 
                  name: "review"
                properties:
                  reviewId:
                    type: "integer"
                    format: "int64"
                    description: "Review ID"
          links:
            GetReviewById: 
              operationId: getReview
              parameters:
                reviewId: '$response.body#/reviewId'
                required: true
                description: ""
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Request"      
        "503":
          description: "Service Unavailable"    
      security:
        - OAuth2: [customer_write]
       
      
  /reviews/{reviewId}/report:
    get:
      tags:
      - "reviews"  
      summary: "Report a Review"
      description: ""
      operationId: "reportReview"
      parameters:
        - in: "path"
          name: "reviewId"
          required: true  
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Review Reported"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review-Report"
            application/xml:
              schema:
                $ref: "#/components/schemas/Review-Report"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Request"      
        "503":
          description: "Service Unavailable"  
      security:
        - OAuth2: [customer_write]
        
    
  /reviews/{reviewId}/vote:
    get:
      tags:
      - "reviews"  
      summary: "Vote for a Review"
      description: ""
      operationId: "voteReview"
      parameters:
        - in: "path"
          name: "reviewId"
          required: true  
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Review Voted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review-Vote"
            application/xml:
              schema:
                $ref: "#/components/schemas/Review-Vote"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Request"      
        "503":
          description: "Service Unavailable"  
      security:
        - OAuth2: [customer_write, moderator]  
        
components:
  schemas:
    
    Review:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          readOnly: true
        funnyFact:
          type: "string"
        score:
          type: "number"
        reviewDescription:
          type: "string"
        date:
          type: "string"
        status:
          type: "string"
          enum:
            - "pending"
            - "accepted"
            - "rejected"
      xml:
        name: "Review"    
    Review-Status:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          readOnly: true
        status:
          type: "string"
          enum:
            - "pending"
            - "accepted"
            - "rejected"
      xml:
        name: "Review" 
        
    Review-Create:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          readOnly: true
        score:
          type: "number"
        reviewDescription:
          type: "string"
      xml:
        name: "Review"
    
    Reviews:
      type: "object"
      properties:
        _embedded:
          type: "object"
          readOnly: true
          default: '
          [{"product": 
            { "_links": 
              [{ "self": 
                { "href":  "/reviews/1" } 
              },
              { "customer": 
                { "href":  "https://psidi-customers.herokuapp.com/v1/customer/{:id}" } 
              },
              { "product": 
                { "href":  "http://catalog-psidi.herokuapp.com/v1/product/{:id}" } 
              },
              { "funnyFact": 
                { "href":  "http://numbersapi/{:month}/{:day}" } 
              },
              { "accept": 
                { "href":  "/reviews/1/accepted" } 
              },
              { "reject": 
                { "href":  "/products/1/reject" } 
              },
              { "report": 
                { "href":  "/reviews/1/report" } 
              },
              { "vote": 
                { "href":  "/products/1/vote" } 
              }]
            }
          }]'
        _links:
          type: "object"
          readOnly: true
          default: ' 
            [{ "self": 
                { "href":  "http://reviews-psidi.herokuapp.com/v1/reviews{?productId}" } 
              },
              { "next": 
                { "href":  "http://reviews-psidi.herokuapp.com/v1/reviews{?productId}&page=2" } 
              },
              { "previous": 
                { "href":  "http://reviews-psidi.herokuapp.com/v1/reviews{?productId}&page=1" } 
              },
              { "start": 
                { "href":  "http://reviews-psidi.herokuapp.com/v1/reviews{?productId}&page=1" } 
              },
              { "last": 
                { "href":  "http://reviews-psidi.herokuapp.com/v1/reviews{?productId}{&lastPage}" } 
              },
              { "find": 
                { "href":  "http://reviews-psidi.herokuapp.com/v1/reviews/{:id}" } 
              },
              { "items": 
                [{ "href":  "/reviews/1" },{ "href":  "/reviews/2" },{ "href":  "/reviews/3" }] 
              }]'
        totalNumberOfResults:
          type: "integer"    

    Review-Report:
      type: "object"
      properties:
        _links:
          type: "object"
          readOnly: true
          default: '
          [
            {"self": 
              { "href": "http://reviews-psidi.herokuapp.com/v1/reviews/{?id}/report" }
            },
            {"review":
              {"href":"http://reviews-psidi.herokuapp.com/v1/reviews/{?id}" }
            },
            {"customer":
              {"href":"http://psidi-customers.herokuapp.com/v1/customers/{?id}" }
            },
            {"product":
              {"href":"http://product-psidi.herokuapp.com/v1/product/{?id}" }
            },
            {"accepted":
              {"href":"http://reviews-psidi.herokuapp.com/v1/reviews/{?id}/accepted" }
            },
            {"rejected":
              {"href":"http://reviews-psidi.herokuapp.com/v1/reviews/{?id}/rejected" }
            }
          ]'

    Review-Vote:
      type: "object"
      properties:
        _links:
          type: "object"
          readOnly: true
          default: '
          [
            {"self": 
              { "href": "http://reviews-psidi.herokuapp.com/v1/reviews/reviewId/vote"} 
            },
            {"review":
              {"href":"http://reviews-psidi.herokuapp.com/v1/reviews/{?id}"}
            },
            {"customer":
              {"href":"http://psidi-customers.herokuapp.com/v1/customers/{?id}"}
            }
          ]'
        numberOfVotes:
          type: "integer"
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize #to be changed#
          tokenUrl: https://example.com/oauth/token             #to be changed#
          scopes:
            customer_read: Grants customers read access
            customer_write: Grants customers write access
            moderator: Grants access to moderator operations